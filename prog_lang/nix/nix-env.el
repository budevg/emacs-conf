(require 'json)

(defun nix-env-export (directory)
  (let ((environment process-environment)
        )
    (unwind-protect
        (with-current-buffer (get-buffer-create "*nix-env*")
          (erase-buffer)
          (let* ((default-directory directory)
                 (process-environment environment)
                 (exit-code (call-process "nix-shell" nil '(t nil) nil "--run" "jq -n env"))
                 )
            (prog1
                (unless (zerop (buffer-size))
                  (goto-char (point-max))
                  (re-search-backward "^{")
                  (let ((json-key-type 'string))
                    (json-read-object)))
              (unless (zerop exit-code)
                (user-error "failed to export nix env")))
            )))))

(defun nix-env-reset ()
  (when (boundp 'exec-path-orig)
    (setq exec-path exec-path-orig)
    (makunbound 'exec-path-orig))
  (when (boundp 'process-environment-orig)
    (setq process-environment process-environment-orig)
    (makunbound 'process-environment-orig))
  (message "RESET nix env"))

(defun nix-env-load ()
  (let ((start-time (current-time))
        (nix-shell-path (locate-dominating-file default-directory "shell.nix"))
        )
    (when (null nix-shell-path)
      (user-error "nix env was not found"))
    (let ((env-list (nix-env-export (file-name-directory nix-shell-path)))
          )
      (if (not (boundp 'exec-path-orig))
          (setq exec-path-orig (copy-sequence exec-path)))
      (if (not (boundp 'process-environment-orig))
          (setq process-environment-orig (copy-sequence process-environment)))
      (dolist (pair env-list)
        (let ((name (car pair))
              (value (cdr pair)))
          (unless (member name '("TEMP" "TMP" "TEMPDIR" "TMPDIR"))
            (setenv name value)
            (when (string-equal name "PATH")
              (setq exec-path (append (parse-colon-path value) (list exec-directory)))
              ))))
      (message "LOAD nix env in %.03f sec" (float-time (time-since start-time)))
      )))

(defun nix-env-load-or-reset ()
  (interactive)
  (if (or (boundp 'exec-path-orig) (boundp 'process-environment-orig))
      (nix-env-reset)
    (nix-env-load)))
